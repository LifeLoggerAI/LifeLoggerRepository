rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated and owns the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection:
    // A user can read and update their own profile.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isOwner(userId); // Creation is handled by a Cloud Function, but this is for robustness.

      // Subcollections under a user's document.
      // This rule is critical and covers auraStates, memoryBlooms, emotionCycles, etc.
      match /{allSubcollections=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Permissions collection:
    // A user can create and manage their own permissions document during onboarding.
    match /permissions/{userId} {
      allow create, read, update: if isOwner(userId);
    }

    // This generic rule applies to all other top-level collections that store user-specific data,
    // such as voiceEvents, dreamEvents, people, goals, tasks, etc.
    match /{collection}/{docId} {
      // Allow create if the new document's uid matches the user's uid.
      allow create: if isOwner(request.resource.data.uid);
      
      // Allow read, update, delete if the existing document's uid matches the user's uid.
      allow read, update, delete: if isOwner(resource.data.uid);
    }
  }
}
