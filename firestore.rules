
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // Users can read their own profile, and can only create their own profile.
    match /users/{uid} {
      allow read, update: if isOwner(uid);
      allow create: if isOwner(uid) && request.resource.data.uid == uid;
    }

    // Permissions: User can create their own permissions document once.
    // They can read and update it afterwards.
    match /permissions/{uid} {
      allow read, update: if isOwner(uid);
      // Ensure the data being written also contains the correct UID.
      allow create: if isOwner(uid) && request.resource.data.uid == uid;
    }

    // Any subcollection under a user's document can only be accessed by that user.
    match /users/{uid}/{subcollection}/{docId} {
        allow read, write, create, delete, update: if isOwner(uid);
    }
    
    // Any collection where the document ID is the user's UID can only be accessed by them.
    match /{collection}/{uid} {
      allow read, write: if isOwner(uid);
    }

    // Any collection where documents have a `uid` field can only be accessed by the owner.
    match /{collection}/{docId} {
       // Note: This rule requires that documents have a `uid` field matching the owner.
       // It's a secure default for collections like voiceEvents, dreamEvents, etc.
      allow read, update, delete: if isOwner(resource.data.uid);
      allow create: if isOwner(request.resource.data.uid);
    }
  }
}
