
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is the owner of the data.
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    // Users can read/update their own profile.
    // Anyone authenticated can create a user profile (e.g., during signup).
    match /users/{uid} {
      allow read, update: if isOwner(uid);
      allow create: if request.auth != null;
    }
    
    // Users can create and manage their own permissions document.
    // The {uid} in the path must match the authenticated user's uid.
    match /permissions/{uid} {
      allow read, write: if isOwner(uid);
    }

    // All other top-level collections owned by a user (e.g., voiceEvents, dreams, goals).
    // This rule requires that any document in these collections has a 'uid' field
    // that matches the authenticated user's uid.
    match /{collection}/{docId} {
      // Allow read, update, and delete if the user is the owner of the existing document.
      allow read, update, delete: if request.auth.uid == resource.data.uid;
      
      // Allow create if the user is the owner of the NEW document being created.
      // This uses request.resource.data, which refers to the document as it would be after the write.
      allow create: if request.auth.uid == request.resource.data.uid;
    }
    
    // Rules for user-specific subcollections (e.g., aura states, memory blooms).
    // This allows access to any subcollection under a user's own document.
    match /users/{uid}/{subcollection}/{docId} {
      allow read, write: if isOwner(uid);
    }
  }
}
