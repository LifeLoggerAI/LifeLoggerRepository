
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }

    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isAuthenticated();
    }
    match /permissions/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /{collection}/{userId}/{docId} 
      where collection in [
        'voiceEvents', 'audioEvents', 'dreams', 'people', 'faceSnapshots', 
        'innerTexts', 'onboardIntake', 'goals', 'tasks', 'calendarEvents', 
        'habitWatch', 'emotionEvents', 'socialOverlays', 'recoveryBlooms', 
        'ritualCards', 'voiceClips', 'voiceTranscripts', 'transcriptTags', 
        'ambientTone', 'narratorInsights', 'socialContacts', 'socialEvents', 
        'timelineEvents', 'shadowEpisodes', 'forecastProfiles', 'archetypeStates', 
        'legacyThreads', 'presentMetrics', 'torsoMetrics', 'habitEvents', 
        'legsMetrics', 'movementPaths', 'avoidanceEvents', 'armMetrics', 
        'relationalGestures'
      ] {
      allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/{subcollection}/{docId}
      where subcollection in [
        'auraStates', 'moodLogs', 'emotionCycles', 'memoryBlooms'
      ] {
       allow read, write: if isOwner(userId);
    }

    // === Data Marketplace & Admin Rules ===

    match /partnerAuth/{partnerId} {
      allow read, write: if false; // Backend access only
    }
    
    match /dataMarketplace/packages/{packageId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /darRequests/{requestId} {
      allow read, write: if isAdmin();
    }
    
    match /exportSummaries/{exportId} {
        allow read: if isAdmin() || (isAuthenticated() && request.auth.token.partnerId != null && resource.data.partnerId == request.auth.token.partnerId);
        allow write: if isAdmin();
    }
    
    match /monetizationLog/{userId}/{entryId} {
        allow read: if isOwner(userId);
        allow write: if false; // Backend access only
    }
    
    // === System-level Collections (backend access only) ===
    
    match /consentAudit/{auditId} {
        allow read, write: if false;
    }
    
    match /mail/{mailId} {
        allow read, write: if false;
    }
  }
}
