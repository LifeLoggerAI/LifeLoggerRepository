
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    // Secure user profiles specifically.
    // The document ID is the user's UID.
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      // Only allow specific, safe fields to be updated by the user.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['displayName', 'settings', 'onboardingComplete']);
    }

    // Secure permissions collection, where the doc ID is the UID.
    match /permissions/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Secure all user-specific subcollections.
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
    }

    // Generic rule for user-owned top-level collections.
    // This rule assumes that every document in these collections has a 'uid' field
    // that stores the ID of the user who owns it.
    match /{collection}/{docId}
      where collection in ['dreamEvents', 'innerTexts', 'voiceEvents', 'audioEvents', 'people', 'cameraCaptures', 'symbolicImageInsights', 'onboardIntake', 'goals', 'tasks', 'calendarEvents', 'habitWatch'] {
        allow create: if isOwner(request.resource.data.uid);
        allow read, update, delete: if isOwner(resource.data.uid);
    }
  }
}
