
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check ownership.
    // For reads/updates, we check the existing resource.
    // For creates, we check the incoming resource data.
    function isOwner(uid) {
      return request.auth.uid == uid;
    }
    
    function isOwnerOfResource() {
      return isOwner(resource.data.uid);
    }
    
    function isOwnerOfRequest() {
      return isOwner(request.resource.data.uid);
    }

    // USERS: Can only read/update their own profile. Create is handled by a Cloud Function.
    match /users/{uid} {
      allow read, update: if isOwner(uid);
    }
    
    // PERMISSIONS: Can create, read, and update their own permissions document.
    match /permissions/{uid} {
      allow read, update: if isOwner(uid);
      allow create: if isOwner(uid) && isOwnerOfRequest();
    }

    // ONBOARDING: Can only create their own intake document.
    match /onboardIntake/{docId} {
        allow create: if isOwnerOfRequest();
    }
    
    // GOALS, TASKS, HABITS, CALENDAR: Can manage their own items.
    match /{collection}/{docId} where collection in ['goals', 'tasks', 'habitWatch', 'calendarEvents'] {
      allow read: if isOwnerOfResource();
      allow create: if isOwnerOfRequest();
      allow update, delete: if isOwnerOfResource();
    }

    // CORE DATA (Events, People): Can manage their own items.
    match /{collection}/{docId} where collection in ['audioEvents', 'voiceEvents', 'dreamEvents', 'innerTexts', 'people'] {
       allow read: if isOwnerOfResource();
       allow create: if isOwnerOfRequest();
       allow update, delete: if isOwnerOfResource();
    }
    
    // USER SUBCOLLECTIONS (Aura, Blooms): Can manage their own subcollection items.
    match /users/{uid}/{collection}/{docId} {
       allow read, write: if isOwner(uid);
    }
  }
}
