rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if the requesting user is the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if a user is creating a document for themselves.
    function isCreatingOwnDocument() {
      return request.auth != null && request.resource.data.uid == request.auth.uid;
    }

    // --- Specific Collection Rules ---

    // Users can read and update their own profile document.
    // Creation is handled by a Cloud Function trigger, so we don't allow client-side creation.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
    }
    
    // Permissions can be created, read, and updated by the document owner.
    match /permissions/{userId} {
      allow read, update: if isOwner(userId);
      // On create, the user's ID must match the document ID and the `uid` field inside the document.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
    }

    // --- Generic Rules for User-Owned Data ---
    
    // This rule applies to all other top-level collections (voiceEvents, dreamEvents, goals, etc.)
    // It assumes every document has a `uid` field indicating the owner.
    match /{collection}/{docId} {
      allow create: if isCreatingOwnDocument();
      allow read, update, delete: if isOwner(resource.data.uid);
    }
    
    // --- Subcollection Rules ---
    
    // This allows users to read and write to any subcollection under their own user document,
    // which is needed for features like `auraStates` and `memoryBlooms`.
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
    }
  }
}
