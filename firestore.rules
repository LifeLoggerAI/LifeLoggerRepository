rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and update their own user document.
    // Creation is handled by a Cloud Function on account creation.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
    }

    // A user's private subcollections (like auraStates, memoryBlooms) are only accessible to them.
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }

    // This generic rule secures all top-level collections by requiring a `uid` field
    // that matches the authenticated user. This covers:
    // permissions, audioEvents, voiceEvents, people, dreamEvents, innerTexts,
    // cameraCaptures, symbolicImageInsights, onboardIntake, goals, tasks,
    // calendarEvents, habitWatch, and narratorInsights.
    match /{collection}/{docId} {
      // Allow a user to read any document in any collection if it belongs to them.
      allow read: if request.auth.uid == resource.data.uid;

      // Allow a user to create a document in any collection if they set themselves as the owner.
      allow create: if request.auth.uid == request.resource.data.uid;
      
      // Allow a user to update or delete a document in any collection if it belongs to them.
      allow update, delete: if request.auth.uid == resource.data.uid;
    }

    // The notification queue can be written to by any authenticated user,
    // to be processed by a backend function.
    match /messages/queue/{messageId} {
      allow create: if request.auth.uid != null;
    }
  }
}
