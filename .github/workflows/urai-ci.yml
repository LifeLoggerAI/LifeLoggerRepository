name: UrAi CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Node.js with caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 3. Cache npm dependencies
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Install dependencies
      - name: Install Dependencies
        run: npm ci

      # 5. Lint code
      - name: Lint Code
        run: npm run lint

      # 6. Type checking
      - name: Type Check
        run: npm run typecheck

      # 7. Validate AI configuration (if available)
      - name: Validate AI Configuration
        run: npm run ai:validate || echo "Skipping AI validation - script not found"

      # 8. Run unit tests (including AI/model tests if defined)
      - name: Run Unit Tests
        run: npm run test || npm run test:models

      # 9. Build app
      - name: Build UrAi
        run: npm run build

      # 10. Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      # 11. Install Playwright browsers for E2E testing
      - name: Install Playwright Browsers
        run: npm run test:e2e:install

      # 12. Run E2E tests
      - name: Run E2E Tests
        run: npm run test:e2e
        continue-on-error: false # fail build if any test fails

      # 13. Run AI Flow Health Check (non-blocking)
      - name: AI Flow Health Check
        run: npm run health-check || echo "Skipping AI health check - script not found"
        continue-on-error: true

      # 14. Deploy to Firebase (only if tests pass and on main branch)
      - name: Deploy to Firebase
        if: github.ref == 'refs/heads/main' && success()
        run: |
          npm install -g firebase-tools
          firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"
